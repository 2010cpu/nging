// @generated Do not edit this file, which is automatically generated by the generator.

package dbschema

import (
	"fmt"

	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	"github.com/webx-top/echo"
	"github.com/webx-top/echo/param"

	"time"
)

type Slice_UserU2f []*UserU2f

func (s Slice_UserU2f) Range(fn func(m factory.Model) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_UserU2f) RangeRaw(fn func(m *UserU2f) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

// UserU2f 两步验证
type UserU2f struct {
	base    factory.Base
	objects []*UserU2f

	Id      uint64 `db:"id,omitempty,pk" bson:"id,omitempty" comment:"" json:"id" xml:"id"`
	Uid     uint   `db:"uid" bson:"uid" comment:"用户ID" json:"uid" xml:"uid"`
	Token   string `db:"token" bson:"token" comment:"签名" json:"token" xml:"token"`
	Type    string `db:"type" bson:"type" comment:"类型" json:"type" xml:"type"`
	Extra   string `db:"extra" bson:"extra" comment:"扩展设置" json:"extra" xml:"extra"`
	Created uint   `db:"created" bson:"created" comment:"绑定时间" json:"created" xml:"created"`
}

// - base function

func (a *UserU2f) Trans() *factory.Transaction {
	return a.base.Trans()
}

func (a *UserU2f) Use(trans *factory.Transaction) factory.Model {
	a.base.Use(trans)
	return a
}

func (a *UserU2f) SetContext(ctx echo.Context) factory.Model {
	a.base.SetContext(ctx)
	return a
}

func (a *UserU2f) Context() echo.Context {
	return a.base.Context()
}

func (a *UserU2f) SetConnID(connID int) factory.Model {
	a.base.SetConnID(connID)
	return a
}

func (a *UserU2f) SetNamer(namer func(string) string) factory.Model {
	a.base.SetNamer(namer)
	return a
}

func (a *UserU2f) Namer() func(string) string {
	return a.base.Namer()
}

func (a *UserU2f) SetParam(param *factory.Param) factory.Model {
	a.base.SetParam(param)
	return a
}

func (a *UserU2f) Param() *factory.Param {
	if a.base.Param() == nil {
		return a.NewParam()
	}
	return a.base.Param()
}

// - current function

func (a *UserU2f) New(structName string, connID ...int) factory.Model {
	if len(connID) > 0 {
		return factory.NewModel(structName, connID[0]).Use(a.base.Trans())
	}
	return factory.NewModel(structName, a.base.ConnID()).Use(a.base.Trans())
}

func (a *UserU2f) Objects() []*UserU2f {
	if a.objects == nil {
		return nil
	}
	return a.objects[:]
}

func (a *UserU2f) NewObjects() factory.Ranger {
	return &Slice_UserU2f{}
}

func (a *UserU2f) InitObjects() *[]*UserU2f {
	a.objects = []*UserU2f{}
	return &a.objects
}

func (a *UserU2f) NewParam() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetIndex(a.base.ConnID()).SetTrans(a.base.Trans()).SetCollection(a.Name_()).SetModel(a)
}

func (a *UserU2f) Short_() string {
	return "user_u2f"
}

func (a *UserU2f) Struct_() string {
	return "UserU2f"
}

func (a *UserU2f) Name_() string {
	if a.base.Namer() != nil {
		return WithPrefix(a.base.Namer()(a.Short_()))
	}
	return WithPrefix(factory.TableNamerGet(a.Short_())(a))
}

func (a *UserU2f) CPAFrom(source factory.Model) factory.Model {
	a.SetContext(source.Context())
	a.Use(source.Trans())
	a.SetNamer(source.Namer())
	return a
}

func (a *UserU2f) Get(mw func(db.Result) db.Result, args ...interface{}) error {
	base := a.base
	err := a.Param().SetArgs(args...).SetRecv(a).SetMiddleware(mw).One()
	a.base = base
	return err
}

func (a *UserU2f) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	return a.Param().SetArgs(args...).SetPage(page).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (a *UserU2f) GroupBy(keyField string, inputRows ...[]*UserU2f) map[string][]*UserU2f {
	var rows []*UserU2f
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = a.Objects()
	}
	r := map[string][]*UserU2f{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		if _, y := r[vkey]; !y {
			r[vkey] = []*UserU2f{}
		}
		r[vkey] = append(r[vkey], row)
	}
	return r
}

func (a *UserU2f) KeyBy(keyField string, inputRows ...[]*UserU2f) map[string]*UserU2f {
	var rows []*UserU2f
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = a.Objects()
	}
	r := map[string]*UserU2f{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = row
	}
	return r
}

func (a *UserU2f) AsKV(keyField string, valueField string, inputRows ...[]*UserU2f) map[string]interface{} {
	var rows []*UserU2f
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = a.Objects()
	}
	r := map[string]interface{}{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = dmap[valueField]
	}
	return r
}

func (a *UserU2f) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	return a.Param().SetArgs(args...).SetOffset(offset).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (a *UserU2f) Add() (pk interface{}, err error) {
	a.Created = uint(time.Now().Unix())
	a.Id = 0
	err = DBI.Fire("creating", a, nil)
	if err != nil {
		return
	}
	pk, err = a.Param().SetSend(a).Insert()
	if err == nil && pk != nil {
		if v, y := pk.(uint64); y {
			a.Id = v
		} else if v, y := pk.(int64); y {
			a.Id = uint64(v)
		}
	}
	if err == nil {
		err = DBI.Fire("created", a, nil)
	}
	return
}

func (a *UserU2f) Edit(mw func(db.Result) db.Result, args ...interface{}) (err error) {

	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if err = a.Setter(mw, args...).SetSend(a).Update(); err != nil {
		return
	}
	return DBI.Fire("updated", a, mw, args...)
}

func (a *UserU2f) Setter(mw func(db.Result) db.Result, args ...interface{}) *factory.Param {
	return a.Param().SetArgs(args...).SetMiddleware(mw)
}

func (a *UserU2f) SetField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) (err error) {
	return a.SetFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (a *UserU2f) SetFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) (err error) {

	m := *a
	m.FromRow(kvset)
	var editColumns []string
	for column := range kvset {
		editColumns = append(editColumns, column)
	}
	if err = DBI.FireUpdate("updating", &m, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Setter(mw, args...).SetSend(kvset).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, editColumns, mw, args...)
}

func (a *UserU2f) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = a.Param().SetArgs(args...).SetSend(a).SetMiddleware(mw).Upsert(func() error {
		return DBI.Fire("updating", a, mw, args...)
	}, func() error {
		a.Created = uint(time.Now().Unix())
		a.Id = 0
		return DBI.Fire("creating", a, nil)
	})
	if err == nil && pk != nil {
		if v, y := pk.(uint64); y {
			a.Id = v
		} else if v, y := pk.(int64); y {
			a.Id = uint64(v)
		}
	}
	if err == nil {
		if pk == nil {
			err = DBI.Fire("updated", a, mw, args...)
		} else {
			err = DBI.Fire("created", a, nil)
		}
	}
	return
}

func (a *UserU2f) Delete(mw func(db.Result) db.Result, args ...interface{}) (err error) {

	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if err = a.Param().SetArgs(args...).SetMiddleware(mw).Delete(); err != nil {
		return
	}
	return DBI.Fire("deleted", a, mw, args...)
}

func (a *UserU2f) Count(mw func(db.Result) db.Result, args ...interface{}) (int64, error) {
	return a.Param().SetArgs(args...).SetMiddleware(mw).Count()
}

func (a *UserU2f) Reset() *UserU2f {
	a.Id = 0
	a.Uid = 0
	a.Token = ``
	a.Type = ``
	a.Extra = ``
	a.Created = 0
	return a
}

func (a *UserU2f) AsMap() map[string]interface{} {
	r := map[string]interface{}{}
	r["Id"] = a.Id
	r["Uid"] = a.Uid
	r["Token"] = a.Token
	r["Type"] = a.Type
	r["Extra"] = a.Extra
	r["Created"] = a.Created
	return r
}

func (a *UserU2f) FromRow(row map[string]interface{}) {
	for key, value := range row {
		switch key {
		case "id":
			a.Id = param.AsUint64(value)
		case "uid":
			a.Uid = param.AsUint(value)
		case "token":
			a.Token = param.AsString(value)
		case "type":
			a.Type = param.AsString(value)
		case "extra":
			a.Extra = param.AsString(value)
		case "created":
			a.Created = param.AsUint(value)
		}
	}
}

func (a *UserU2f) Set(key interface{}, value ...interface{}) {
	switch k := key.(type) {
	case map[string]interface{}:
		for kk, vv := range k {
			a.Set(kk, vv)
		}
	default:
		var (
			kk string
			vv interface{}
		)
		if k, y := key.(string); y {
			kk = k
		} else {
			kk = fmt.Sprint(key)
		}
		if len(value) > 0 {
			vv = value[0]
		}
		switch kk {
		case "Id":
			a.Id = param.AsUint64(vv)
		case "Uid":
			a.Uid = param.AsUint(vv)
		case "Token":
			a.Token = param.AsString(vv)
		case "Type":
			a.Type = param.AsString(vv)
		case "Extra":
			a.Extra = param.AsString(vv)
		case "Created":
			a.Created = param.AsUint(vv)
		}
	}
}

func (a *UserU2f) AsRow() map[string]interface{} {
	r := map[string]interface{}{}
	r["id"] = a.Id
	r["uid"] = a.Uid
	r["token"] = a.Token
	r["type"] = a.Type
	r["extra"] = a.Extra
	r["created"] = a.Created
	return r
}

func (a *UserU2f) BatchValidate(kvset map[string]interface{}) error {
	if kvset == nil {
		kvset = a.AsRow()
	}
	return factory.BatchValidate(a.Short_(), kvset)
}

func (a *UserU2f) Validate(field string, value interface{}) error {
	return factory.Validate(a.Short_(), field, value)
}
