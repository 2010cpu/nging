// @generated Do not edit this file, which is automatically generated by the generator.

package dbschema

import (
	"fmt"

	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	"github.com/webx-top/echo"
	"github.com/webx-top/echo/param"
	
	"time"
)

type Slice_Command []*Command

func (s Slice_Command) Range(fn func(m factory.Model) error ) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_Command) RangeRaw(fn func(m *Command) error ) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

// Command 指令集
type Command struct {
	base    factory.Base
	objects []*Command
	
	Id            	uint    	`db:"id,omitempty,pk" bson:"id,omitempty" comment:"ID" json:"id" xml:"id"`
	Name          	string  	`db:"name" bson:"name" comment:"名称" json:"name" xml:"name"`
	Description   	string  	`db:"description" bson:"description" comment:"说明" json:"description" xml:"description"`
	Command       	string  	`db:"command" bson:"command" comment:"命令" json:"command" xml:"command"`
	WorkDirectory 	string  	`db:"work_directory" bson:"work_directory" comment:"工作目录" json:"work_directory" xml:"work_directory"`
	Env           	string  	`db:"env" bson:"env" comment:"环境变量(一行一个，格式为：var1=val1)" json:"env" xml:"env"`
	Created       	uint    	`db:"created" bson:"created" comment:"添加时间" json:"created" xml:"created"`
	Updated       	uint    	`db:"updated" bson:"updated" comment:"修改时间" json:"updated" xml:"updated"`
	Disabled      	string  	`db:"disabled" bson:"disabled" comment:"是否禁用" json:"disabled" xml:"disabled"`
	Remote        	string  	`db:"remote" bson:"remote" comment:"是否执行远程SSH命令" json:"remote" xml:"remote"`
	SshAccountId  	uint    	`db:"ssh_account_id" bson:"ssh_account_id" comment:"SSH账号ID" json:"ssh_account_id" xml:"ssh_account_id"`
}

// - base function

func (this *Command) Trans() *factory.Transaction {
	return this.base.Trans()
}

func (this *Command) Use(trans *factory.Transaction) factory.Model {
	this.base.Use(trans)
	return this
}

func (this *Command) SetContext(ctx echo.Context) factory.Model {
	this.base.SetContext(ctx)
	return this
}

func (this *Command) Context() echo.Context {
	return this.base.Context()
}

func (this *Command) SetConnID(connID int) factory.Model {
	this.base.SetConnID(connID)
	return this
}

func (this *Command) SetNamer(namer func (string) string) factory.Model {
	this.base.SetNamer(namer)
	return this
}

func (this *Command) Namer() func(string) string {
	return this.base.Namer()
}

func (this *Command) SetParam(param *factory.Param) factory.Model {
	this.base.SetParam(param)
	return this
}

func (this *Command) Param() *factory.Param {
	if this.base.Param() == nil {
		return this.NewParam()
	}
	return this.base.Param()
}

// - current function

func (this *Command) New(structName string, connID ...int) factory.Model {
	if len(connID) > 0 {
		return factory.NewModel(structName,connID[0]).Use(this.trans)
	}
	return factory.NewModel(structName,this.base.ConnID()).Use(this.trans)
}

func (this *Command) Objects() []*Command {
	if this.bjects == nil {
		return nil
	}
	return this.objects[:]
}

func (this *Command) NewObjects() factory.Ranger {
	return &Slice_Command{}
}

func (this *Command) InitObjects() *[]*Command {
	this.objects = []*Command{}
	return &this.objects
}

func (this *Command) NewParam() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetIndex(this.connID).SetTrans(this.trans).SetCollection(this.Name_()).SetModel(this)
}

func (this *Command) Short_() string {
	return "command"
}

func (this *Command) Struct_() string {
	return "Command"
}

func (this *Command) Name_() string {
	if this.base.Namer() != nil {
		return WithPrefix(this.base.Namer()(this.Short_()))
	}
	return WithPrefix(factory.TableNamerGet(this.Short_())(this))
}

func (this *Command) CPAFrom(source factory.Model) factory.Model {
	this.SetContext(source.Context())
	this.Use(source.Trans())
	this.SetNamer(source.Namer())
	return this
}

func (this *Command) Get(mw func(db.Result) db.Result, args ...interface{}) error {
	base := this.base
	err := this.Param().SetArgs(args...).SetRecv(this).SetMiddleware(mw).One()
	this.base = base
	return err
}

func (this *Command) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = this.InitObjects()
	}
	return this.Param().SetArgs(args...).SetPage(page).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (this *Command) GroupBy(keyField string, inputRows ...[]*Command) map[string][]*Command {
	var rows []*Command
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = this.Objects()
	}
	r := map[string][]*Command{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		if _, y := r[vkey]; !y {
			r[vkey] = []*Command{}
		}
		r[vkey] = append(r[vkey], row)
	}
	return r
}

func (this *Command) KeyBy(keyField string, inputRows ...[]*Command) map[string]*Command {
	var rows []*Command
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = this.Objects()
	}
	r := map[string]*Command{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = row
	}
	return r
}

func (this *Command) AsKV(keyField string, valueField string, inputRows ...[]*Command) map[string]interface{} {
	var rows []*Command
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = this.Objects()
	}
	r := map[string]interface{}{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = dmap[valueField]
	}
	return r
}

func (this *Command) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = this.InitObjects()
	}
	return this.Param().SetArgs(args...).SetOffset(offset).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (this *Command) Add() (pk interface{}, err error) {
	this.Created = uint(time.Now().Unix())
	this.Id = 0
	if len(this.Disabled) == 0 { this.Disabled = "N" }
	if len(this.Remote) == 0 { this.Remote = "N" }
	err = DBI.Fire("creating", this, nil)
	if err != nil {
		return
	}
	pk, err = this.Param().SetSend(this).Insert()
	if err == nil && pk != nil {
		if v, y := pk.(uint); y {
			this.Id = v
		} else if v, y := pk.(int64); y {
			this.Id = uint(v)
		}
	}
	if err == nil {
		err = DBI.Fire("created", this, nil)
	}
	return
}

func (this *Command) Edit(mw func(db.Result) db.Result, args ...interface{}) (err error) {
	this.Updated = uint(time.Now().Unix())
	if len(this.Disabled) == 0 { this.Disabled = "N" }
	if len(this.Remote) == 0 { this.Remote = "N" }
	if err = DBI.Fire("updating", this, mw, args...); err != nil {
		return
	}
	if err = this.Setter(mw, args...).SetSend(this).Update(); err != nil {
		return
	}
	return DBI.Fire("updated", this, mw, args...)
}

func (this *Command) Setter(mw func(db.Result) db.Result, args ...interface{}) *factory.Param {
	return this.Param().SetArgs(args...).SetMiddleware(mw)
}

func (this *Command) SetField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) (err error) {
	return this.SetFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (this *Command) SetFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) (err error) {
	
	if val, ok := kvset["disabled"]; ok && val != nil { if v, ok := val.(string); ok && len(v) == 0 { kvset["disabled"] = "N" } }
	if val, ok := kvset["remote"]; ok && val != nil { if v, ok := val.(string); ok && len(v) == 0 { kvset["remote"] = "N" } }
	m := *this
	m.FromRow(kvset)
	var editColumns []string
	for column := range kvset {
		editColumns = append(editColumns, column)
	}
	if err = DBI.FireUpdate("updating", &m, editColumns, mw, args...); err != nil {
		return
	}
	if err = this.Setter(mw, args...).SetSend(kvset).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, editColumns, mw, args...)
}

func (this *Command) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = this.Param().SetArgs(args...).SetSend(this).SetMiddleware(mw).Upsert(func() error { this.Updated = uint(time.Now().Unix())
	if len(this.Disabled) == 0 { this.Disabled = "N" }
	if len(this.Remote) == 0 { this.Remote = "N" }
		return DBI.Fire("updating", this, mw, args...)
	}, func() error { this.Created = uint(time.Now().Unix())
	this.Id = 0
	if len(this.Disabled) == 0 { this.Disabled = "N" }
	if len(this.Remote) == 0 { this.Remote = "N" }
		return DBI.Fire("creating", this, nil)
	})
	if err == nil && pk != nil {
		if v, y := pk.(uint); y {
			this.Id = v
		} else if v, y := pk.(int64); y {
			this.Id = uint(v)
		}
	}
	if err == nil {
		if pk == nil {
			err = DBI.Fire("updated", this, mw, args...)
		} else {
			err = DBI.Fire("created", this, nil)
		}
	} 
	return 
}

func (this *Command) Delete(mw func(db.Result) db.Result, args ...interface{})  (err error) {
	
	if err = DBI.Fire("deleting", this, mw, args...); err != nil {
		return
	}
	if err = this.Param().SetArgs(args...).SetMiddleware(mw).Delete(); err != nil {
		return
	}
	return DBI.Fire("deleted", this, mw, args...)
}

func (this *Command) Count(mw func(db.Result) db.Result, args ...interface{}) (int64, error) {
	return this.Param().SetArgs(args...).SetMiddleware(mw).Count()
}

func (this *Command) Reset() *Command {
	this.Id = 0
	this.Name = ``
	this.Description = ``
	this.Command = ``
	this.WorkDirectory = ``
	this.Env = ``
	this.Created = 0
	this.Updated = 0
	this.Disabled = ``
	this.Remote = ``
	this.SshAccountId = 0
	return this
}

func (this *Command) AsMap() map[string]interface{} {
	r := map[string]interface{}{}
	r["Id"] = this.Id
	r["Name"] = this.Name
	r["Description"] = this.Description
	r["Command"] = this.Command
	r["WorkDirectory"] = this.WorkDirectory
	r["Env"] = this.Env
	r["Created"] = this.Created
	r["Updated"] = this.Updated
	r["Disabled"] = this.Disabled
	r["Remote"] = this.Remote
	r["SshAccountId"] = this.SshAccountId
	return r
}

func (this *Command) FromRow(row map[string]interface{}) {
	for key, value := range row {
		switch key {
			case "id": this.Id = param.AsUint(value)
			case "name": this.Name = param.AsString(value)
			case "description": this.Description = param.AsString(value)
			case "command": this.Command = param.AsString(value)
			case "work_directory": this.WorkDirectory = param.AsString(value)
			case "env": this.Env = param.AsString(value)
			case "created": this.Created = param.AsUint(value)
			case "updated": this.Updated = param.AsUint(value)
			case "disabled": this.Disabled = param.AsString(value)
			case "remote": this.Remote = param.AsString(value)
			case "ssh_account_id": this.SshAccountId = param.AsUint(value)
		}
	}
}

func (this *Command) Set(key interface{}, value ...interface{}) {
	switch k := key.(type) {
		case map[string]interface{}:
			for kk, vv := range k {
				this.Set(kk, vv)
			}
		default:
			var (
				kk string
				vv interface{}
			)
			if k, y := key.(string); y {
				kk = k
			} else {
				kk = fmt.Sprint(key)
			}
			if len(value) > 0 {
				vv = value[0]
			}
			switch kk {
				case "Id": this.Id = param.AsUint(vv)
				case "Name": this.Name = param.AsString(vv)
				case "Description": this.Description = param.AsString(vv)
				case "Command": this.Command = param.AsString(vv)
				case "WorkDirectory": this.WorkDirectory = param.AsString(vv)
				case "Env": this.Env = param.AsString(vv)
				case "Created": this.Created = param.AsUint(vv)
				case "Updated": this.Updated = param.AsUint(vv)
				case "Disabled": this.Disabled = param.AsString(vv)
				case "Remote": this.Remote = param.AsString(vv)
				case "SshAccountId": this.SshAccountId = param.AsUint(vv)
			}
	}
}

func (this *Command) AsRow() map[string]interface{} {
	r := map[string]interface{}{}
	r["id"] = this.Id
	r["name"] = this.Name
	r["description"] = this.Description
	r["command"] = this.Command
	r["work_directory"] = this.WorkDirectory
	r["env"] = this.Env
	r["created"] = this.Created
	r["updated"] = this.Updated
	r["disabled"] = this.Disabled
	r["remote"] = this.Remote
	r["ssh_account_id"] = this.SshAccountId
	return r
}

func (this *Command) BatchValidate(kvset map[string]interface{}) error {
	if kvset == nil {
		kvset = this.AsRow()
	}
	return factory.BatchValidate(this.Short_(), kvset)
}

func (this *Command) Validate(field string, value interface{}) error {
	return factory.Validate(this.Short_(), field, value)
}

