// @generated Do not edit this file, which is automatically generated by the generator.

package dbschema

import (
	"fmt"

	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	"github.com/webx-top/echo/param"
	
)

// FileEmbedded 嵌入文件
type FileEmbedded struct {
	param   *factory.Param
	trans	*factory.Transaction
	objects []*FileEmbedded
	namer   func(string) string
	connID  int
	
	Id        	uint64  	`db:"id,omitempty,pk" bson:"id,omitempty" comment:"主键" json:"id" xml:"id"`
	Project   	string  	`db:"project" bson:"project" comment:"项目名" json:"project" xml:"project"`
	TableId   	uint64  	`db:"table_id" bson:"table_id" comment:"表主键" json:"table_id" xml:"table_id"`
	TableName 	string  	`db:"table_name" bson:"table_name" comment:"表名称" json:"table_name" xml:"table_name"`
	FieldName 	string  	`db:"field_name" bson:"field_name" comment:"字段名" json:"field_name" xml:"field_name"`
	FileIds   	string  	`db:"file_ids" bson:"file_ids" comment:"文件id列表" json:"file_ids" xml:"file_ids"`
}

func (this *FileEmbedded) Trans() *factory.Transaction {
	return this.trans
}

func (this *FileEmbedded) Use(trans *factory.Transaction) factory.Model {
	this.trans = trans
	return this
}

func (this *FileEmbedded) SetConnID(connID int) factory.Model {
	this.connID = connID
	return this
}

func (this *FileEmbedded) New(structName string, connID ...int) factory.Model {
	if len(connID) > 0 {
		return factory.NewModel(structName,connID[0]).Use(this.trans)
	}
	return factory.NewModel(structName,this.connID).Use(this.trans)
}

func (this *FileEmbedded) Objects() []*FileEmbedded {
	if this.objects == nil {
		return nil
	}
	return this.objects[:]
}

func (this *FileEmbedded) NewObjects() *[]*FileEmbedded {
	this.objects = []*FileEmbedded{}
	return &this.objects
}

func (this *FileEmbedded) NewParam() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetIndex(this.connID).SetTrans(this.trans).SetCollection(this.Name_()).SetModel(this)
}

func (this *FileEmbedded) SetNamer(namer func (string) string) factory.Model {
	this.namer = namer
	return this
}

func (this *FileEmbedded) Short_() string {
	return "file_embedded"
}

func (this *FileEmbedded) Struct_() string {
	return "FileEmbedded"
}

func (this *FileEmbedded) Name_() string {
	if this.namer != nil {
		return WithPrefix(this.namer(this.Short_()))
	}
	return WithPrefix(factory.TableNamerGet(this.Short_())(this))
}

func (this *FileEmbedded) SetParam(param *factory.Param) factory.Model {
	this.param = param
	return this
}

func (this *FileEmbedded) Param() *factory.Param {
	if this.param == nil {
		return this.NewParam()
	}
	return this.param
}

func (this *FileEmbedded) Get(mw func(db.Result) db.Result, args ...interface{}) error {
	return this.Param().SetArgs(args...).SetRecv(this).SetMiddleware(mw).One()
}

func (this *FileEmbedded) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = this.NewObjects()
	}
	return this.Param().SetArgs(args...).SetPage(page).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (this *FileEmbedded) GroupBy(keyField string, inputRows ...[]*FileEmbedded) map[string][]*FileEmbedded {
	var rows []*FileEmbedded
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = this.Objects()
	}
	r := map[string][]*FileEmbedded{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		if _, y := r[vkey]; !y {
			r[vkey] = []*FileEmbedded{}
		}
		r[vkey] = append(r[vkey], row)
	}
	return r
}

func (this *FileEmbedded) KeyBy(keyField string, inputRows ...[]*FileEmbedded) map[string]*FileEmbedded {
	var rows []*FileEmbedded
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = this.Objects()
	}
	r := map[string]*FileEmbedded{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = row
	}
	return r
}

func (this *FileEmbedded) AsKV(keyField string, valueField string, inputRows ...[]*FileEmbedded) map[string]interface{} {
	var rows []*FileEmbedded
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = this.Objects()
	}
	r := map[string]interface{}{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = dmap[valueField]
	}
	return r
}

func (this *FileEmbedded) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = this.NewObjects()
	}
	return this.Param().SetArgs(args...).SetOffset(offset).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (this *FileEmbedded) Add() (pk interface{}, err error) {
	this.Id = 0
	pk, err = this.Param().SetSend(this).Insert()
	if err == nil && pk != nil {
		if v, y := pk.(uint64); y {
			this.Id = v
		} else if v, y := pk.(int64); y {
			this.Id = uint64(v)
		}
	}
	return
}

func (this *FileEmbedded) Edit(mw func(db.Result) db.Result, args ...interface{}) error {
	
	return this.Setter(mw, args...).SetSend(this).Update()
}

func (this *FileEmbedded) Setter(mw func(db.Result) db.Result, args ...interface{}) *factory.Param {
	return this.Param().SetArgs(args...).SetMiddleware(mw)
}

func (this *FileEmbedded) SetField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) error {
	return this.SetFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (this *FileEmbedded) SetFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) error {
	
	return this.Setter(mw, args...).SetSend(kvset).Update()
}

func (this *FileEmbedded) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = this.Param().SetArgs(args...).SetSend(this).SetMiddleware(mw).Upsert(func(){
		
	},func(){
		this.Id = 0
	})
	if err == nil && pk != nil {
		if v, y := pk.(uint64); y {
			this.Id = v
		} else if v, y := pk.(int64); y {
			this.Id = uint64(v)
		}
	}
	return 
}

func (this *FileEmbedded) Delete(mw func(db.Result) db.Result, args ...interface{}) error {
	
	return this.Param().SetArgs(args...).SetMiddleware(mw).Delete()
}

func (this *FileEmbedded) Count(mw func(db.Result) db.Result, args ...interface{}) (int64, error) {
	return this.Param().SetArgs(args...).SetMiddleware(mw).Count()
}

func (this *FileEmbedded) Reset() *FileEmbedded {
	this.Id = 0
	this.Project = ``
	this.TableId = 0
	this.TableName = ``
	this.FieldName = ``
	this.FileIds = ``
	return this
}

func (this *FileEmbedded) AsMap() map[string]interface{} {
	r := map[string]interface{}{}
	r["Id"] = this.Id
	r["Project"] = this.Project
	r["TableId"] = this.TableId
	r["TableName"] = this.TableName
	r["FieldName"] = this.FieldName
	r["FileIds"] = this.FileIds
	return r
}

func (this *FileEmbedded) Set(key interface{}, value ...interface{}) {
	switch k := key.(type) {
		case map[string]interface{}:
			for kk, vv := range k {
				this.Set(kk, vv)
			}
		default:
			var (
				kk string
				vv interface{}
			)
			if k, y := key.(string); y {
				kk = k
			} else {
				kk = fmt.Sprint(key)
			}
			if len(value) > 0 {
				vv = value[0]
			}
			switch kk {
				case "Id": this.Id = param.AsUint64(vv)
				case "Project": this.Project = param.AsString(vv)
				case "TableId": this.TableId = param.AsUint64(vv)
				case "TableName": this.TableName = param.AsString(vv)
				case "FieldName": this.FieldName = param.AsString(vv)
				case "FileIds": this.FileIds = param.AsString(vv)
			}
	}
}

func (this *FileEmbedded) AsRow() map[string]interface{} {
	r := map[string]interface{}{}
	r["id"] = this.Id
	r["project"] = this.Project
	r["table_id"] = this.TableId
	r["table_name"] = this.TableName
	r["field_name"] = this.FieldName
	r["file_ids"] = this.FileIds
	return r
}

func (this *FileEmbedded) BatchValidate(kvset map[string]interface{}) error {
	if kvset == nil {
		kvset = this.AsRow()
	}
	return factory.BatchValidate(this.Short_(), kvset)
}

func (this *FileEmbedded) Validate(field string, value interface{}) error {
	return factory.Validate(this.Short_(), field, value)
}

