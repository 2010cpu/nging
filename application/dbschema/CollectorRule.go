// @generated Do not edit this file, which is automatically generated by the generator.

package dbschema

import (
	"fmt"

	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	"github.com/webx-top/echo/param"
	
	"time"
)

// CollectorRule 页面中的元素采集规则
type CollectorRule struct {
	param   *factory.Param
	trans	*factory.Transaction
	objects []*CollectorRule
	namer   func(string) string
	connID  int
	
	Id     	uint    	`db:"id,omitempty,pk" bson:"id,omitempty" comment:"ID" json:"id" xml:"id"`
	PageId 	uint    	`db:"page_id" bson:"page_id" comment:"页面ID" json:"page_id" xml:"page_id"`
	Name   	string  	`db:"name" bson:"name" comment:"保存匹配结果的变量名" json:"name" xml:"name"`
	Rule   	string  	`db:"rule" bson:"rule" comment:"规则" json:"rule" xml:"rule"`
	Type   	string  	`db:"type" bson:"type" comment:"数据类型" json:"type" xml:"type"`
	Filter 	string  	`db:"filter" bson:"filter" comment:"过滤器" json:"filter" xml:"filter"`
	Created	uint    	`db:"created" bson:"created" comment:"创建时间" json:"created" xml:"created"`
	Sort   	int     	`db:"sort" bson:"sort" comment:"排序" json:"sort" xml:"sort"`
}

func (this *CollectorRule) Trans() *factory.Transaction {
	return this.trans
}

func (this *CollectorRule) Use(trans *factory.Transaction) factory.Model {
	this.trans = trans
	return this
}

func (this *CollectorRule) SetConnID(connID int) factory.Model {
	this.connID = connID
	return this
}

func (this *CollectorRule) New(structName string, connID ...int) factory.Model {
	if len(connID) > 0 {
		return factory.NewModel(structName,connID[0]).Use(this.trans)
	}
	return factory.NewModel(structName,this.connID).Use(this.trans)
}

func (this *CollectorRule) Objects() []*CollectorRule {
	if this.objects == nil {
		return nil
	}
	return this.objects[:]
}

func (this *CollectorRule) NewObjects() *[]*CollectorRule {
	this.objects = []*CollectorRule{}
	return &this.objects
}

func (this *CollectorRule) NewParam() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetIndex(this.connID).SetTrans(this.trans).SetCollection(this.Name_()).SetModel(this)
}

func (this *CollectorRule) SetNamer(namer func (string) string) factory.Model {
	this.namer = namer
	return this
}

func (this *CollectorRule) Short_() string {
	return "collector_rule"
}

func (this *CollectorRule) Struct_() string {
	return "CollectorRule"
}

func (this *CollectorRule) Name_() string {
	if this.namer != nil {
		return WithPrefix(this.namer(this.Short_()))
	}
	return WithPrefix(factory.TableNamerGet(this.Short_())(this))
}

func (this *CollectorRule) SetParam(param *factory.Param) factory.Model {
	this.param = param
	return this
}

func (this *CollectorRule) Param() *factory.Param {
	if this.param == nil {
		return this.NewParam()
	}
	return this.param
}

func (this *CollectorRule) Get(mw func(db.Result) db.Result, args ...interface{}) error {
	return this.Param().SetArgs(args...).SetRecv(this).SetMiddleware(mw).One()
}

func (this *CollectorRule) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = this.NewObjects()
	}
	return this.Param().SetArgs(args...).SetPage(page).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (this *CollectorRule) GroupBy(keyField string, inputRows ...[]*CollectorRule) map[string][]*CollectorRule {
	var rows []*CollectorRule
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = this.Objects()
	}
	r := map[string][]*CollectorRule{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		if _, y := r[vkey]; !y {
			r[vkey] = []*CollectorRule{}
		}
		r[vkey] = append(r[vkey], row)
	}
	return r
}

func (this *CollectorRule) KeyBy(keyField string, inputRows ...[]*CollectorRule) map[string]*CollectorRule {
	var rows []*CollectorRule
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = this.Objects()
	}
	r := map[string]*CollectorRule{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = row
	}
	return r
}

func (this *CollectorRule) AsKV(keyField string, valueField string, inputRows ...[]*CollectorRule) map[string]interface{} {
	var rows []*CollectorRule
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = this.Objects()
	}
	r := map[string]interface{}{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = dmap[valueField]
	}
	return r
}

func (this *CollectorRule) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = this.NewObjects()
	}
	return this.Param().SetArgs(args...).SetOffset(offset).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (this *CollectorRule) Add() (pk interface{}, err error) {
	this.Created = uint(time.Now().Unix())
	this.Id = 0
	if len(this.Type) == 0 { this.Type = "string" }
	pk, err = this.Param().SetSend(this).Insert()
	if err == nil && pk != nil {
		if v, y := pk.(uint); y {
			this.Id = v
		} else if v, y := pk.(int64); y {
			this.Id = uint(v)
		}
	}
	return
}

func (this *CollectorRule) Edit(mw func(db.Result) db.Result, args ...interface{}) error {
	
	if len(this.Type) == 0 { this.Type = "string" }
	return this.Setter(mw, args...).SetSend(this).Update()
}

func (this *CollectorRule) Setter(mw func(db.Result) db.Result, args ...interface{}) *factory.Param {
	return this.Param().SetArgs(args...).SetMiddleware(mw)
}

func (this *CollectorRule) SetField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) error {
	return this.SetFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (this *CollectorRule) SetFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) error {
	
	if val, ok := kvset["type"]; ok && val != nil { if v, ok := val.(string); ok && len(v) == 0 { kvset["type"] = "string" } }
	return this.Setter(mw, args...).SetSend(kvset).Update()
}

func (this *CollectorRule) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = this.Param().SetArgs(args...).SetSend(this).SetMiddleware(mw).Upsert(func(){
		
	if len(this.Type) == 0 { this.Type = "string" }
	},func(){
		this.Created = uint(time.Now().Unix())
	this.Id = 0
	if len(this.Type) == 0 { this.Type = "string" }
	})
	if err == nil && pk != nil {
		if v, y := pk.(uint); y {
			this.Id = v
		} else if v, y := pk.(int64); y {
			this.Id = uint(v)
		}
	}
	return 
}

func (this *CollectorRule) Delete(mw func(db.Result) db.Result, args ...interface{}) error {
	
	return this.Param().SetArgs(args...).SetMiddleware(mw).Delete()
}

func (this *CollectorRule) Count(mw func(db.Result) db.Result, args ...interface{}) (int64, error) {
	return this.Param().SetArgs(args...).SetMiddleware(mw).Count()
}

func (this *CollectorRule) Reset() *CollectorRule {
	this.Id = 0
	this.PageId = 0
	this.Name = ``
	this.Rule = ``
	this.Type = ``
	this.Filter = ``
	this.Created = 0
	this.Sort = 0
	return this
}

func (this *CollectorRule) AsMap() map[string]interface{} {
	r := map[string]interface{}{}
	r["Id"] = this.Id
	r["PageId"] = this.PageId
	r["Name"] = this.Name
	r["Rule"] = this.Rule
	r["Type"] = this.Type
	r["Filter"] = this.Filter
	r["Created"] = this.Created
	r["Sort"] = this.Sort
	return r
}

func (this *CollectorRule) Set(key interface{}, value ...interface{}) factory.Model {
	switch k := key.(type) {
		case map[string]interface{}:
			for kk, vv := range k {
				this.Set(kk, vv)
			}
		default:
			var (
				kk string
				vv interface{}
			)
			if k, y := key.(string); y {
				kk = k
			} else {
				kk = fmt.Sprint(key)
			}
			if len(value) > 0 {
				vv = value[0]
			}
			switch kk {
				case "Id": this.Id = param.AsUint(vv)
				case "PageId": this.PageId = param.AsUint(vv)
				case "Name": this.Name = param.AsString(vv)
				case "Rule": this.Rule = param.AsString(vv)
				case "Type": this.Type = param.AsString(vv)
				case "Filter": this.Filter = param.AsString(vv)
				case "Created": this.Created = param.AsUint(vv)
				case "Sort": this.Sort = param.AsInt(vv)
			}
	}
	r := map[string]interface{}{}
	r["Id"] = this.Id
	r["PageId"] = this.PageId
	r["Name"] = this.Name
	r["Rule"] = this.Rule
	r["Type"] = this.Type
	r["Filter"] = this.Filter
	r["Created"] = this.Created
	r["Sort"] = this.Sort
	return r
}

func (this *CollectorRule) AsRow() map[string]interface{} {
	r := map[string]interface{}{}
	r["id"] = this.Id
	r["page_id"] = this.PageId
	r["name"] = this.Name
	r["rule"] = this.Rule
	r["type"] = this.Type
	r["filter"] = this.Filter
	r["created"] = this.Created
	r["sort"] = this.Sort
	return r
}

func (this *CollectorRule) BatchValidate(kvset map[string]interface{}) error {
	if kvset == nil {
		kvset = this.AsRow()
	}
	return factory.BatchValidate(this.Short_(), kvset)
}

func (this *CollectorRule) Validate(field string, value interface{}) error {
	return factory.Validate(this.Short_(), field, value)
}

