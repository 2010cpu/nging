// @generated Do not edit this file, which is automatically generated by the generator.

package dbschema

import (
	"fmt"

	"time"

	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	"github.com/webx-top/echo"
	"github.com/webx-top/echo/param"
)

type Slice_CloudStorage []*CloudStorage

func (s Slice_CloudStorage) Range(fn func(m factory.Model) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_CloudStorage) RangeRaw(fn func(m *CloudStorage) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

// CloudStorage 云存储账号
type CloudStorage struct {
	base    factory.Base
	objects []*CloudStorage

	Id       uint   `db:"id,omitempty,pk" bson:"id,omitempty" comment:"ID" json:"id" xml:"id"`
	Name     string `db:"name" bson:"name" comment:"名称" json:"name" xml:"name"`
	Type     string `db:"type" bson:"type" comment:"存储类型(aws,oss,cos)" json:"type" xml:"type"`
	Key      string `db:"key" bson:"key" comment:"key" json:"key" xml:"key"`
	Secret   string `db:"secret" bson:"secret" comment:"密钥(加密处理)" json:"secret" xml:"secret"`
	Bucket   string `db:"bucket" bson:"bucket" comment:"存储桶" json:"bucket" xml:"bucket"`
	Endpoint string `db:"endpoint" bson:"endpoint" comment:"地域节点" json:"endpoint" xml:"endpoint"`
	Region   string `db:"region" bson:"region" comment:"地区" json:"region" xml:"region"`
	Secure   string `db:"secure" bson:"secure" comment:"是否(Y/N)HTTPS" json:"secure" xml:"secure"`
	Baseurl  string `db:"baseurl" bson:"baseurl" comment:"资源基础网址" json:"baseurl" xml:"baseurl"`
	Created  uint   `db:"created" bson:"created" comment:"创建时间" json:"created" xml:"created"`
	Updated  uint   `db:"updated" bson:"updated" comment:"修改时间" json:"updated" xml:"updated"`
}

// - base function

func (a *CloudStorage) Trans() *factory.Transaction {
	return a.base.Trans()
}

func (a *CloudStorage) Use(trans *factory.Transaction) factory.Model {
	a.base.Use(trans)
	return a
}

func (a *CloudStorage) SetContext(ctx echo.Context) factory.Model {
	a.base.SetContext(ctx)
	return a
}

func (a *CloudStorage) Context() echo.Context {
	return a.base.Context()
}

func (a *CloudStorage) SetConnID(connID int) factory.Model {
	a.base.SetConnID(connID)
	return a
}

func (a *CloudStorage) SetNamer(namer func(string) string) factory.Model {
	a.base.SetNamer(namer)
	return a
}

func (a *CloudStorage) Namer() func(string) string {
	return a.base.Namer()
}

func (a *CloudStorage) SetParam(param *factory.Param) factory.Model {
	a.base.SetParam(param)
	return a
}

func (a *CloudStorage) Param(mw func(db.Result) db.Result, args ...interface{}) *factory.Param {
	if a.base.Param() == nil {
		return a.NewParam().SetMiddleware(mw).SetArgs(args...)
	}
	return a.base.Param().SetMiddleware(mw).SetArgs(args...)
}

// - current function

func (a *CloudStorage) New(structName string, connID ...int) factory.Model {
	if len(connID) > 0 {
		return factory.NewModel(structName, connID[0]).Use(a.base.Trans())
	}
	return factory.NewModel(structName, a.base.ConnID()).Use(a.base.Trans())
}

func (a *CloudStorage) Objects() []*CloudStorage {
	if a.objects == nil {
		return nil
	}
	return a.objects[:]
}

func (a *CloudStorage) NewObjects() factory.Ranger {
	return &Slice_CloudStorage{}
}

func (a *CloudStorage) InitObjects() *[]*CloudStorage {
	a.objects = []*CloudStorage{}
	return &a.objects
}

func (a *CloudStorage) NewParam() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetIndex(a.base.ConnID()).SetTrans(a.base.Trans()).SetCollection(a.Name_()).SetModel(a)
}

func (a *CloudStorage) Short_() string {
	return "cloud_storage"
}

func (a *CloudStorage) Struct_() string {
	return "CloudStorage"
}

func (a *CloudStorage) Name_() string {
	if a.base.Namer() != nil {
		return WithPrefix(a.base.Namer()(a.Short_()))
	}
	return WithPrefix(factory.TableNamerGet(a.Short_())(a))
}

func (a *CloudStorage) CPAFrom(source factory.Model) factory.Model {
	a.SetContext(source.Context())
	a.Use(source.Trans())
	a.SetNamer(source.Namer())
	return a
}

func (a *CloudStorage) Get(mw func(db.Result) db.Result, args ...interface{}) error {
	base := a.base
	err := a.Param(mw, args...).SetRecv(a).One()
	a.base = base
	return err
}

func (a *CloudStorage) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	return a.Param(mw, args...).SetPage(page).SetSize(size).SetRecv(recv).List()
}

func (a *CloudStorage) GroupBy(keyField string, inputRows ...[]*CloudStorage) map[string][]*CloudStorage {
	var rows []*CloudStorage
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = a.Objects()
	}
	r := map[string][]*CloudStorage{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		if _, y := r[vkey]; !y {
			r[vkey] = []*CloudStorage{}
		}
		r[vkey] = append(r[vkey], row)
	}
	return r
}

func (a *CloudStorage) KeyBy(keyField string, inputRows ...[]*CloudStorage) map[string]*CloudStorage {
	var rows []*CloudStorage
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = a.Objects()
	}
	r := map[string]*CloudStorage{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = row
	}
	return r
}

func (a *CloudStorage) AsKV(keyField string, valueField string, inputRows ...[]*CloudStorage) map[string]interface{} {
	var rows []*CloudStorage
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = a.Objects()
	}
	r := map[string]interface{}{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = dmap[valueField]
	}
	return r
}

func (a *CloudStorage) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	return a.Param(mw, args...).SetOffset(offset).SetSize(size).SetRecv(recv).List()
}

func (a *CloudStorage) Add() (pk interface{}, err error) {
	a.Created = uint(time.Now().Unix())
	a.Id = 0
	if len(a.Type) == 0 {
		a.Type = "aws"
	}
	if len(a.Secure) == 0 {
		a.Secure = "Y"
	}
	err = DBI.Fire("creating", a, nil)
	if err != nil {
		return
	}
	pk, err = a.Param(nil).SetSend(a).Insert()
	if err == nil && pk != nil {
		if v, y := pk.(uint); y {
			a.Id = v
		} else if v, y := pk.(int64); y {
			a.Id = uint(v)
		}
	}
	if err == nil {
		err = DBI.Fire("created", a, nil)
	}
	return
}

func (a *CloudStorage) Edit(mw func(db.Result) db.Result, args ...interface{}) (err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.Type) == 0 {
		a.Type = "aws"
	}
	if len(a.Secure) == 0 {
		a.Secure = "Y"
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(a).Update(); err != nil {
		return
	}
	return DBI.Fire("updated", a, mw, args...)
}

func (a *CloudStorage) SetField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) (err error) {
	return a.SetFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (a *CloudStorage) SetFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) (err error) {

	if val, ok := kvset["type"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["type"] = "aws"
		}
	}
	if val, ok := kvset["secure"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["secure"] = "Y"
		}
	}
	m := *a
	m.FromRow(kvset)
	var editColumns []string
	for column := range kvset {
		editColumns = append(editColumns, column)
	}
	if err = DBI.FireUpdate("updating", &m, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(kvset).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, editColumns, mw, args...)
}

func (a *CloudStorage) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = a.Param(mw, args...).SetSend(a).Upsert(func() error {
		a.Updated = uint(time.Now().Unix())
		if len(a.Type) == 0 {
			a.Type = "aws"
		}
		if len(a.Secure) == 0 {
			a.Secure = "Y"
		}
		return DBI.Fire("updating", a, mw, args...)
	}, func() error {
		a.Created = uint(time.Now().Unix())
		a.Id = 0
		if len(a.Type) == 0 {
			a.Type = "aws"
		}
		if len(a.Secure) == 0 {
			a.Secure = "Y"
		}
		return DBI.Fire("creating", a, nil)
	})
	if err == nil && pk != nil {
		if v, y := pk.(uint); y {
			a.Id = v
		} else if v, y := pk.(int64); y {
			a.Id = uint(v)
		}
	}
	if err == nil {
		if pk == nil {
			err = DBI.Fire("updated", a, mw, args...)
		} else {
			err = DBI.Fire("created", a, nil)
		}
	}
	return
}

func (a *CloudStorage) Delete(mw func(db.Result) db.Result, args ...interface{}) (err error) {

	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).Delete(); err != nil {
		return
	}
	return DBI.Fire("deleted", a, mw, args...)
}

func (a *CloudStorage) Count(mw func(db.Result) db.Result, args ...interface{}) (int64, error) {
	return a.Param(mw, args...).Count()
}

func (a *CloudStorage) Reset() *CloudStorage {
	a.Id = 0
	a.Name = ``
	a.Type = ``
	a.Key = ``
	a.Secret = ``
	a.Bucket = ``
	a.Endpoint = ``
	a.Region = ``
	a.Secure = ``
	a.Baseurl = ``
	a.Created = 0
	a.Updated = 0
	return a
}

func (a *CloudStorage) AsMap() map[string]interface{} {
	r := map[string]interface{}{}
	r["Id"] = a.Id
	r["Name"] = a.Name
	r["Type"] = a.Type
	r["Key"] = a.Key
	r["Secret"] = a.Secret
	r["Bucket"] = a.Bucket
	r["Endpoint"] = a.Endpoint
	r["Region"] = a.Region
	r["Secure"] = a.Secure
	r["Baseurl"] = a.Baseurl
	r["Created"] = a.Created
	r["Updated"] = a.Updated
	return r
}

func (a *CloudStorage) FromRow(row map[string]interface{}) {
	for key, value := range row {
		switch key {
		case "id":
			a.Id = param.AsUint(value)
		case "name":
			a.Name = param.AsString(value)
		case "type":
			a.Type = param.AsString(value)
		case "key":
			a.Key = param.AsString(value)
		case "secret":
			a.Secret = param.AsString(value)
		case "bucket":
			a.Bucket = param.AsString(value)
		case "endpoint":
			a.Endpoint = param.AsString(value)
		case "region":
			a.Region = param.AsString(value)
		case "secure":
			a.Secure = param.AsString(value)
		case "baseurl":
			a.Baseurl = param.AsString(value)
		case "created":
			a.Created = param.AsUint(value)
		case "updated":
			a.Updated = param.AsUint(value)
		}
	}
}

func (a *CloudStorage) Set(key interface{}, value ...interface{}) {
	switch k := key.(type) {
	case map[string]interface{}:
		for kk, vv := range k {
			a.Set(kk, vv)
		}
	default:
		var (
			kk string
			vv interface{}
		)
		if k, y := key.(string); y {
			kk = k
		} else {
			kk = fmt.Sprint(key)
		}
		if len(value) > 0 {
			vv = value[0]
		}
		switch kk {
		case "Id":
			a.Id = param.AsUint(vv)
		case "Name":
			a.Name = param.AsString(vv)
		case "Type":
			a.Type = param.AsString(vv)
		case "Key":
			a.Key = param.AsString(vv)
		case "Secret":
			a.Secret = param.AsString(vv)
		case "Bucket":
			a.Bucket = param.AsString(vv)
		case "Endpoint":
			a.Endpoint = param.AsString(vv)
		case "Region":
			a.Region = param.AsString(vv)
		case "Secure":
			a.Secure = param.AsString(vv)
		case "Baseurl":
			a.Baseurl = param.AsString(vv)
		case "Created":
			a.Created = param.AsUint(vv)
		case "Updated":
			a.Updated = param.AsUint(vv)
		}
	}
}

func (a *CloudStorage) AsRow() map[string]interface{} {
	r := map[string]interface{}{}
	r["id"] = a.Id
	r["name"] = a.Name
	r["type"] = a.Type
	r["key"] = a.Key
	r["secret"] = a.Secret
	r["bucket"] = a.Bucket
	r["endpoint"] = a.Endpoint
	r["region"] = a.Region
	r["secure"] = a.Secure
	r["baseurl"] = a.Baseurl
	r["created"] = a.Created
	r["updated"] = a.Updated
	return r
}

func (a *CloudStorage) BatchValidate(kvset map[string]interface{}) error {
	if kvset == nil {
		kvset = a.AsRow()
	}
	return factory.BatchValidate(a.Short_(), kvset)
}

func (a *CloudStorage) Validate(field string, value interface{}) error {
	return factory.Validate(a.Short_(), field, value)
}
