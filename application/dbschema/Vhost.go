// @generated Do not edit this file, which is automatically generated by the generator.

package dbschema

import (
	"fmt"

	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	"github.com/webx-top/echo"
	"github.com/webx-top/echo/param"

	"time"
)

type Slice_Vhost []*Vhost

func (s Slice_Vhost) Range(fn func(m factory.Model) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_Vhost) RangeRaw(fn func(m *Vhost) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

// Vhost 虚拟主机
type Vhost struct {
	base    factory.Base
	objects []*Vhost

	Id       uint   `db:"id,omitempty,pk" bson:"id,omitempty" comment:"ID" json:"id" xml:"id"`
	Name     string `db:"name" bson:"name" comment:"网站名称" json:"name" xml:"name"`
	GroupId  uint   `db:"group_id" bson:"group_id" comment:"组" json:"group_id" xml:"group_id"`
	Domain   string `db:"domain" bson:"domain" comment:"域名" json:"domain" xml:"domain"`
	Root     string `db:"root" bson:"root" comment:"网站物理路径" json:"root" xml:"root"`
	Created  uint   `db:"created" bson:"created" comment:"创建时间" json:"created" xml:"created"`
	Updated  uint   `db:"updated" bson:"updated" comment:"更新时间" json:"updated" xml:"updated"`
	Setting  string `db:"setting" bson:"setting" comment:"设置" json:"setting" xml:"setting"`
	Disabled string `db:"disabled" bson:"disabled" comment:"是否停用" json:"disabled" xml:"disabled"`
}

// - base function

func (a *Vhost) Trans() *factory.Transaction {
	return a.base.Trans()
}

func (a *Vhost) Use(trans *factory.Transaction) factory.Model {
	a.base.Use(trans)
	return a
}

func (a *Vhost) SetContext(ctx echo.Context) factory.Model {
	a.base.SetContext(ctx)
	return a
}

func (a *Vhost) Context() echo.Context {
	return a.base.Context()
}

func (a *Vhost) SetConnID(connID int) factory.Model {
	a.base.SetConnID(connID)
	return a
}

func (a *Vhost) SetNamer(namer func(string) string) factory.Model {
	a.base.SetNamer(namer)
	return a
}

func (a *Vhost) Namer() func(string) string {
	return a.base.Namer()
}

func (a *Vhost) SetParam(param *factory.Param) factory.Model {
	a.base.SetParam(param)
	return a
}

func (a *Vhost) Param() *factory.Param {
	if a.base.Param() == nil {
		return a.NewParam()
	}
	return a.base.Param()
}

// - current function

func (a *Vhost) New(structName string, connID ...int) factory.Model {
	if len(connID) > 0 {
		return factory.NewModel(structName, connID[0]).Use(a.base.Trans())
	}
	return factory.NewModel(structName, a.base.ConnID()).Use(a.base.Trans())
}

func (a *Vhost) Objects() []*Vhost {
	if a.objects == nil {
		return nil
	}
	return a.objects[:]
}

func (a *Vhost) NewObjects() factory.Ranger {
	return &Slice_Vhost{}
}

func (a *Vhost) InitObjects() *[]*Vhost {
	a.objects = []*Vhost{}
	return &a.objects
}

func (a *Vhost) NewParam() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetIndex(a.base.ConnID()).SetTrans(a.base.Trans()).SetCollection(a.Name_()).SetModel(a)
}

func (a *Vhost) Short_() string {
	return "vhost"
}

func (a *Vhost) Struct_() string {
	return "Vhost"
}

func (a *Vhost) Name_() string {
	if a.base.Namer() != nil {
		return WithPrefix(a.base.Namer()(a.Short_()))
	}
	return WithPrefix(factory.TableNamerGet(a.Short_())(a))
}

func (a *Vhost) CPAFrom(source factory.Model) factory.Model {
	a.SetContext(source.Context())
	a.Use(source.Trans())
	a.SetNamer(source.Namer())
	return a
}

func (a *Vhost) Get(mw func(db.Result) db.Result, args ...interface{}) error {
	base := a.base
	err := a.Param().SetArgs(args...).SetRecv(a).SetMiddleware(mw).One()
	a.base = base
	return err
}

func (a *Vhost) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	return a.Param().SetArgs(args...).SetPage(page).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (a *Vhost) GroupBy(keyField string, inputRows ...[]*Vhost) map[string][]*Vhost {
	var rows []*Vhost
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = a.Objects()
	}
	r := map[string][]*Vhost{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		if _, y := r[vkey]; !y {
			r[vkey] = []*Vhost{}
		}
		r[vkey] = append(r[vkey], row)
	}
	return r
}

func (a *Vhost) KeyBy(keyField string, inputRows ...[]*Vhost) map[string]*Vhost {
	var rows []*Vhost
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = a.Objects()
	}
	r := map[string]*Vhost{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = row
	}
	return r
}

func (a *Vhost) AsKV(keyField string, valueField string, inputRows ...[]*Vhost) map[string]interface{} {
	var rows []*Vhost
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = a.Objects()
	}
	r := map[string]interface{}{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = dmap[valueField]
	}
	return r
}

func (a *Vhost) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	return a.Param().SetArgs(args...).SetOffset(offset).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (a *Vhost) Add() (pk interface{}, err error) {
	a.Created = uint(time.Now().Unix())
	a.Id = 0
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	err = DBI.Fire("creating", a, nil)
	if err != nil {
		return
	}
	pk, err = a.Param().SetSend(a).Insert()
	if err == nil && pk != nil {
		if v, y := pk.(uint); y {
			a.Id = v
		} else if v, y := pk.(int64); y {
			a.Id = uint(v)
		}
	}
	if err == nil {
		err = DBI.Fire("created", a, nil)
	}
	return
}

func (a *Vhost) Edit(mw func(db.Result) db.Result, args ...interface{}) (err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if err = a.Setter(mw, args...).SetSend(a).Update(); err != nil {
		return
	}
	return DBI.Fire("updated", a, mw, args...)
}

func (a *Vhost) Setter(mw func(db.Result) db.Result, args ...interface{}) *factory.Param {
	return a.Param().SetArgs(args...).SetMiddleware(mw)
}

func (a *Vhost) SetField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) (err error) {
	return a.SetFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (a *Vhost) SetFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) (err error) {

	if val, ok := kvset["disabled"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["disabled"] = "N"
		}
	}
	m := *a
	m.FromRow(kvset)
	var editColumns []string
	for column := range kvset {
		editColumns = append(editColumns, column)
	}
	if err = DBI.FireUpdate("updating", &m, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Setter(mw, args...).SetSend(kvset).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, editColumns, mw, args...)
}

func (a *Vhost) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = a.Param().SetArgs(args...).SetSend(a).SetMiddleware(mw).Upsert(func() error {
		a.Updated = uint(time.Now().Unix())
		if len(a.Disabled) == 0 {
			a.Disabled = "N"
		}
		return DBI.Fire("updating", a, mw, args...)
	}, func() error {
		a.Created = uint(time.Now().Unix())
		a.Id = 0
		if len(a.Disabled) == 0 {
			a.Disabled = "N"
		}
		return DBI.Fire("creating", a, nil)
	})
	if err == nil && pk != nil {
		if v, y := pk.(uint); y {
			a.Id = v
		} else if v, y := pk.(int64); y {
			a.Id = uint(v)
		}
	}
	if err == nil {
		if pk == nil {
			err = DBI.Fire("updated", a, mw, args...)
		} else {
			err = DBI.Fire("created", a, nil)
		}
	}
	return
}

func (a *Vhost) Delete(mw func(db.Result) db.Result, args ...interface{}) (err error) {

	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if err = a.Param().SetArgs(args...).SetMiddleware(mw).Delete(); err != nil {
		return
	}
	return DBI.Fire("deleted", a, mw, args...)
}

func (a *Vhost) Count(mw func(db.Result) db.Result, args ...interface{}) (int64, error) {
	return a.Param().SetArgs(args...).SetMiddleware(mw).Count()
}

func (a *Vhost) Reset() *Vhost {
	a.Id = 0
	a.Name = ``
	a.GroupId = 0
	a.Domain = ``
	a.Root = ``
	a.Created = 0
	a.Updated = 0
	a.Setting = ``
	a.Disabled = ``
	return a
}

func (a *Vhost) AsMap() map[string]interface{} {
	r := map[string]interface{}{}
	r["Id"] = a.Id
	r["Name"] = a.Name
	r["GroupId"] = a.GroupId
	r["Domain"] = a.Domain
	r["Root"] = a.Root
	r["Created"] = a.Created
	r["Updated"] = a.Updated
	r["Setting"] = a.Setting
	r["Disabled"] = a.Disabled
	return r
}

func (a *Vhost) FromRow(row map[string]interface{}) {
	for key, value := range row {
		switch key {
		case "id":
			a.Id = param.AsUint(value)
		case "name":
			a.Name = param.AsString(value)
		case "group_id":
			a.GroupId = param.AsUint(value)
		case "domain":
			a.Domain = param.AsString(value)
		case "root":
			a.Root = param.AsString(value)
		case "created":
			a.Created = param.AsUint(value)
		case "updated":
			a.Updated = param.AsUint(value)
		case "setting":
			a.Setting = param.AsString(value)
		case "disabled":
			a.Disabled = param.AsString(value)
		}
	}
}

func (a *Vhost) Set(key interface{}, value ...interface{}) {
	switch k := key.(type) {
	case map[string]interface{}:
		for kk, vv := range k {
			a.Set(kk, vv)
		}
	default:
		var (
			kk string
			vv interface{}
		)
		if k, y := key.(string); y {
			kk = k
		} else {
			kk = fmt.Sprint(key)
		}
		if len(value) > 0 {
			vv = value[0]
		}
		switch kk {
		case "Id":
			a.Id = param.AsUint(vv)
		case "Name":
			a.Name = param.AsString(vv)
		case "GroupId":
			a.GroupId = param.AsUint(vv)
		case "Domain":
			a.Domain = param.AsString(vv)
		case "Root":
			a.Root = param.AsString(vv)
		case "Created":
			a.Created = param.AsUint(vv)
		case "Updated":
			a.Updated = param.AsUint(vv)
		case "Setting":
			a.Setting = param.AsString(vv)
		case "Disabled":
			a.Disabled = param.AsString(vv)
		}
	}
}

func (a *Vhost) AsRow() map[string]interface{} {
	r := map[string]interface{}{}
	r["id"] = a.Id
	r["name"] = a.Name
	r["group_id"] = a.GroupId
	r["domain"] = a.Domain
	r["root"] = a.Root
	r["created"] = a.Created
	r["updated"] = a.Updated
	r["setting"] = a.Setting
	r["disabled"] = a.Disabled
	return r
}

func (a *Vhost) BatchValidate(kvset map[string]interface{}) error {
	if kvset == nil {
		kvset = a.AsRow()
	}
	return factory.BatchValidate(a.Short_(), kvset)
}

func (a *Vhost) Validate(field string, value interface{}) error {
	return factory.Validate(a.Short_(), field, value)
}
