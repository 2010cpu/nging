// @generated Do not edit this file, which is automatically generated by the generator.

package dbschema

import (
	"fmt"

	"time"

	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	"github.com/webx-top/echo"
	"github.com/webx-top/echo/param"
)

type Slice_User []*User

func (s Slice_User) Range(fn func(m factory.Model) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_User) RangeRaw(fn func(m *User) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

// User 用户
type User struct {
	base    factory.Base
	objects []*User

	Id        uint   `db:"id,omitempty,pk" bson:"id,omitempty" comment:"" json:"id" xml:"id"`
	Username  string `db:"username" bson:"username" comment:"用户名" json:"username" xml:"username"`
	Email     string `db:"email" bson:"email" comment:"邮箱" json:"email" xml:"email"`
	Mobile    string `db:"mobile" bson:"mobile" comment:"手机号" json:"mobile" xml:"mobile"`
	Password  string `db:"password" bson:"password" comment:"密码" json:"password" xml:"password"`
	Salt      string `db:"salt" bson:"salt" comment:"盐值" json:"salt" xml:"salt"`
	SafePwd   string `db:"safe_pwd" bson:"safe_pwd" comment:"安全密码" json:"safe_pwd" xml:"safe_pwd"`
	Avatar    string `db:"avatar" bson:"avatar" comment:"头像" json:"avatar" xml:"avatar"`
	Gender    string `db:"gender" bson:"gender" comment:"性别(male-男;female-女;secret-保密)" json:"gender" xml:"gender"`
	LastLogin uint   `db:"last_login" bson:"last_login" comment:"最后登录时间" json:"last_login" xml:"last_login"`
	LastIp    string `db:"last_ip" bson:"last_ip" comment:"最后登录IP" json:"last_ip" xml:"last_ip"`
	Disabled  string `db:"disabled" bson:"disabled" comment:"状态" json:"disabled" xml:"disabled"`
	Online    string `db:"online" bson:"online" comment:"是否在线" json:"online" xml:"online"`
	RoleIds   string `db:"role_ids" bson:"role_ids" comment:"角色ID(多个用“,”分隔开)" json:"role_ids" xml:"role_ids"`
	Created   uint   `db:"created" bson:"created" comment:"创建时间" json:"created" xml:"created"`
	Updated   uint   `db:"updated" bson:"updated" comment:"更新时间" json:"updated" xml:"updated"`
	FileSize  uint64 `db:"file_size" bson:"file_size" comment:"上传文件总大小" json:"file_size" xml:"file_size"`
	FileNum   uint64 `db:"file_num" bson:"file_num" comment:"上传文件数量" json:"file_num" xml:"file_num"`
}

// - base function

func (a *User) Trans() *factory.Transaction {
	return a.base.Trans()
}

func (a *User) Use(trans *factory.Transaction) factory.Model {
	a.base.Use(trans)
	return a
}

func (a *User) SetContext(ctx echo.Context) factory.Model {
	a.base.SetContext(ctx)
	return a
}

func (a *User) Context() echo.Context {
	return a.base.Context()
}

func (a *User) SetConnID(connID int) factory.Model {
	a.base.SetConnID(connID)
	return a
}

func (a *User) SetNamer(namer func(string) string) factory.Model {
	a.base.SetNamer(namer)
	return a
}

func (a *User) Namer() func(string) string {
	return a.base.Namer()
}

func (a *User) SetParam(param *factory.Param) factory.Model {
	a.base.SetParam(param)
	return a
}

func (a *User) Param(mw func(db.Result) db.Result, args ...interface{}) *factory.Param {
	if a.base.Param() == nil {
		return a.NewParam().SetMiddleware(mw).SetArgs(args...)
	}
	return a.base.Param().SetMiddleware(mw).SetArgs(args...)
}

// - current function

func (a *User) New(structName string, connID ...int) factory.Model {
	if len(connID) > 0 {
		return factory.NewModel(structName, connID[0]).Use(a.base.Trans())
	}
	return factory.NewModel(structName, a.base.ConnID()).Use(a.base.Trans())
}

func (a *User) Objects() []*User {
	if a.objects == nil {
		return nil
	}
	return a.objects[:]
}

func (a *User) NewObjects() factory.Ranger {
	return &Slice_User{}
}

func (a *User) InitObjects() *[]*User {
	a.objects = []*User{}
	return &a.objects
}

func (a *User) NewParam() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetIndex(a.base.ConnID()).SetTrans(a.base.Trans()).SetCollection(a.Name_()).SetModel(a)
}

func (a *User) Short_() string {
	return "user"
}

func (a *User) Struct_() string {
	return "User"
}

func (a *User) Name_() string {
	if a.base.Namer() != nil {
		return WithPrefix(a.base.Namer()(a.Short_()))
	}
	return WithPrefix(factory.TableNamerGet(a.Short_())(a))
}

func (a *User) CPAFrom(source factory.Model) factory.Model {
	a.SetContext(source.Context())
	a.Use(source.Trans())
	a.SetNamer(source.Namer())
	return a
}

func (a *User) Get(mw func(db.Result) db.Result, args ...interface{}) error {
	base := a.base
	err := a.Param(mw, args...).SetRecv(a).One()
	a.base = base
	return err
}

func (a *User) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	return a.Param(mw, args...).SetPage(page).SetSize(size).SetRecv(recv).List()
}

func (a *User) GroupBy(keyField string, inputRows ...[]*User) map[string][]*User {
	var rows []*User
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = a.Objects()
	}
	r := map[string][]*User{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		if _, y := r[vkey]; !y {
			r[vkey] = []*User{}
		}
		r[vkey] = append(r[vkey], row)
	}
	return r
}

func (a *User) KeyBy(keyField string, inputRows ...[]*User) map[string]*User {
	var rows []*User
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = a.Objects()
	}
	r := map[string]*User{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = row
	}
	return r
}

func (a *User) AsKV(keyField string, valueField string, inputRows ...[]*User) map[string]interface{} {
	var rows []*User
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = a.Objects()
	}
	r := map[string]interface{}{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = dmap[valueField]
	}
	return r
}

func (a *User) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	return a.Param(mw, args...).SetOffset(offset).SetSize(size).SetRecv(recv).List()
}

func (a *User) Add() (pk interface{}, err error) {
	a.Created = uint(time.Now().Unix())
	a.Id = 0
	if len(a.Gender) == 0 {
		a.Gender = "secret"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if len(a.Online) == 0 {
		a.Online = "N"
	}
	err = DBI.Fire("creating", a, nil)
	if err != nil {
		return
	}
	pk, err = a.Param(nil).SetSend(a).Insert()
	if err == nil && pk != nil {
		if v, y := pk.(uint); y {
			a.Id = v
		} else if v, y := pk.(int64); y {
			a.Id = uint(v)
		}
	}
	if err == nil {
		err = DBI.Fire("created", a, nil)
	}
	return
}

func (a *User) Edit(mw func(db.Result) db.Result, args ...interface{}) (err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.Gender) == 0 {
		a.Gender = "secret"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if len(a.Online) == 0 {
		a.Online = "N"
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(a).Update(); err != nil {
		return
	}
	return DBI.Fire("updated", a, mw, args...)
}

func (a *User) SetField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) (err error) {
	return a.SetFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (a *User) SetFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) (err error) {

	if val, ok := kvset["gender"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["gender"] = "secret"
		}
	}
	if val, ok := kvset["disabled"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["disabled"] = "N"
		}
	}
	if val, ok := kvset["online"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["online"] = "N"
		}
	}
	m := *a
	m.FromRow(kvset)
	var editColumns []string
	for column := range kvset {
		editColumns = append(editColumns, column)
	}
	if err = DBI.FireUpdate("updating", &m, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(kvset).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, editColumns, mw, args...)
}

func (a *User) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = a.Param(mw, args...).SetSend(a).Upsert(func() error {
		a.Updated = uint(time.Now().Unix())
		if len(a.Gender) == 0 {
			a.Gender = "secret"
		}
		if len(a.Disabled) == 0 {
			a.Disabled = "N"
		}
		if len(a.Online) == 0 {
			a.Online = "N"
		}
		return DBI.Fire("updating", a, mw, args...)
	}, func() error {
		a.Created = uint(time.Now().Unix())
		a.Id = 0
		if len(a.Gender) == 0 {
			a.Gender = "secret"
		}
		if len(a.Disabled) == 0 {
			a.Disabled = "N"
		}
		if len(a.Online) == 0 {
			a.Online = "N"
		}
		return DBI.Fire("creating", a, nil)
	})
	if err == nil && pk != nil {
		if v, y := pk.(uint); y {
			a.Id = v
		} else if v, y := pk.(int64); y {
			a.Id = uint(v)
		}
	}
	if err == nil {
		if pk == nil {
			err = DBI.Fire("updated", a, mw, args...)
		} else {
			err = DBI.Fire("created", a, nil)
		}
	}
	return
}

func (a *User) Delete(mw func(db.Result) db.Result, args ...interface{}) (err error) {

	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).Delete(); err != nil {
		return
	}
	return DBI.Fire("deleted", a, mw, args...)
}

func (a *User) Count(mw func(db.Result) db.Result, args ...interface{}) (int64, error) {
	return a.Param(mw, args...).Count()
}

func (a *User) Reset() *User {
	a.Id = 0
	a.Username = ``
	a.Email = ``
	a.Mobile = ``
	a.Password = ``
	a.Salt = ``
	a.SafePwd = ``
	a.Avatar = ``
	a.Gender = ``
	a.LastLogin = 0
	a.LastIp = ``
	a.Disabled = ``
	a.Online = ``
	a.RoleIds = ``
	a.Created = 0
	a.Updated = 0
	a.FileSize = 0
	a.FileNum = 0
	return a
}

func (a *User) AsMap() map[string]interface{} {
	r := map[string]interface{}{}
	r["Id"] = a.Id
	r["Username"] = a.Username
	r["Email"] = a.Email
	r["Mobile"] = a.Mobile
	r["Password"] = a.Password
	r["Salt"] = a.Salt
	r["SafePwd"] = a.SafePwd
	r["Avatar"] = a.Avatar
	r["Gender"] = a.Gender
	r["LastLogin"] = a.LastLogin
	r["LastIp"] = a.LastIp
	r["Disabled"] = a.Disabled
	r["Online"] = a.Online
	r["RoleIds"] = a.RoleIds
	r["Created"] = a.Created
	r["Updated"] = a.Updated
	r["FileSize"] = a.FileSize
	r["FileNum"] = a.FileNum
	return r
}

func (a *User) FromRow(row map[string]interface{}) {
	for key, value := range row {
		switch key {
		case "id":
			a.Id = param.AsUint(value)
		case "username":
			a.Username = param.AsString(value)
		case "email":
			a.Email = param.AsString(value)
		case "mobile":
			a.Mobile = param.AsString(value)
		case "password":
			a.Password = param.AsString(value)
		case "salt":
			a.Salt = param.AsString(value)
		case "safe_pwd":
			a.SafePwd = param.AsString(value)
		case "avatar":
			a.Avatar = param.AsString(value)
		case "gender":
			a.Gender = param.AsString(value)
		case "last_login":
			a.LastLogin = param.AsUint(value)
		case "last_ip":
			a.LastIp = param.AsString(value)
		case "disabled":
			a.Disabled = param.AsString(value)
		case "online":
			a.Online = param.AsString(value)
		case "role_ids":
			a.RoleIds = param.AsString(value)
		case "created":
			a.Created = param.AsUint(value)
		case "updated":
			a.Updated = param.AsUint(value)
		case "file_size":
			a.FileSize = param.AsUint64(value)
		case "file_num":
			a.FileNum = param.AsUint64(value)
		}
	}
}

func (a *User) Set(key interface{}, value ...interface{}) {
	switch k := key.(type) {
	case map[string]interface{}:
		for kk, vv := range k {
			a.Set(kk, vv)
		}
	default:
		var (
			kk string
			vv interface{}
		)
		if k, y := key.(string); y {
			kk = k
		} else {
			kk = fmt.Sprint(key)
		}
		if len(value) > 0 {
			vv = value[0]
		}
		switch kk {
		case "Id":
			a.Id = param.AsUint(vv)
		case "Username":
			a.Username = param.AsString(vv)
		case "Email":
			a.Email = param.AsString(vv)
		case "Mobile":
			a.Mobile = param.AsString(vv)
		case "Password":
			a.Password = param.AsString(vv)
		case "Salt":
			a.Salt = param.AsString(vv)
		case "SafePwd":
			a.SafePwd = param.AsString(vv)
		case "Avatar":
			a.Avatar = param.AsString(vv)
		case "Gender":
			a.Gender = param.AsString(vv)
		case "LastLogin":
			a.LastLogin = param.AsUint(vv)
		case "LastIp":
			a.LastIp = param.AsString(vv)
		case "Disabled":
			a.Disabled = param.AsString(vv)
		case "Online":
			a.Online = param.AsString(vv)
		case "RoleIds":
			a.RoleIds = param.AsString(vv)
		case "Created":
			a.Created = param.AsUint(vv)
		case "Updated":
			a.Updated = param.AsUint(vv)
		case "FileSize":
			a.FileSize = param.AsUint64(vv)
		case "FileNum":
			a.FileNum = param.AsUint64(vv)
		}
	}
}

func (a *User) AsRow() map[string]interface{} {
	r := map[string]interface{}{}
	r["id"] = a.Id
	r["username"] = a.Username
	r["email"] = a.Email
	r["mobile"] = a.Mobile
	r["password"] = a.Password
	r["salt"] = a.Salt
	r["safe_pwd"] = a.SafePwd
	r["avatar"] = a.Avatar
	r["gender"] = a.Gender
	r["last_login"] = a.LastLogin
	r["last_ip"] = a.LastIp
	r["disabled"] = a.Disabled
	r["online"] = a.Online
	r["role_ids"] = a.RoleIds
	r["created"] = a.Created
	r["updated"] = a.Updated
	r["file_size"] = a.FileSize
	r["file_num"] = a.FileNum
	return r
}

func (a *User) BatchValidate(kvset map[string]interface{}) error {
	if kvset == nil {
		kvset = a.AsRow()
	}
	return factory.BatchValidate(a.Short_(), kvset)
}

func (a *User) Validate(field string, value interface{}) error {
	return factory.Validate(a.Short_(), field, value)
}
