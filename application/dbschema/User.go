//Do not edit this file, which is automatically generated by the generator.
package dbschema

import (
	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	
)

type User struct {
	param   *factory.Param
	trans	*factory.Transaction
	objects []*User
	
	Id        	uint    	`db:"id,omitempty,pk" bson:"id,omitempty" comment:"" json:"id" xml:"id"`
	Username  	string  	`db:"username" bson:"username" comment:"用户名" json:"username" xml:"username"`
	Email     	string  	`db:"email" bson:"email" comment:"邮箱" json:"email" xml:"email"`
	Password  	string  	`db:"password" bson:"password" comment:"密码" json:"password" xml:"password"`
	Salt      	string  	`db:"salt" bson:"salt" comment:"盐值" json:"salt" xml:"salt"`
	LastLogin 	uint    	`db:"last_login" bson:"last_login" comment:"最后登录时间" json:"last_login" xml:"last_login"`
	LastIp    	string  	`db:"last_ip" bson:"last_ip" comment:"最后登录IP" json:"last_ip" xml:"last_ip"`
	Disabled  	string  	`db:"disabled" bson:"disabled" comment:"状态" json:"disabled" xml:"disabled"`
}

func (this *User) Trans() *factory.Transaction {
	return this.trans
}

func (this *User) Use(trans *factory.Transaction) factory.Model {
	this.trans = trans
	return this
}

func (this *User) Objects() []*User {
	if this.objects == nil {
		return nil
	}
	return this.objects[:]
}

func (this *User) NewObjects() *[]*User {
	this.objects = []*User{}
	return &this.objects
}

func (this *User) NewParam() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetTrans(this.trans).SetCollection("user").SetModel(this)
}

func (this *User) SetParam(param *factory.Param) factory.Model {
	this.param = param
	return this
}

func (this *User) Param() *factory.Param {
	if this.param == nil {
		return this.NewParam()
	}
	return this.param
}

func (this *User) Get(mw func(db.Result) db.Result, args ...interface{}) error {
	return this.Param().SetArgs(args...).SetRecv(this).SetMiddleware(mw).One()
}

func (this *User) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = this.NewObjects()
	}
	return this.Param().SetArgs(args...).SetPage(page).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (this *User) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = this.NewObjects()
	}
	return this.Param().SetArgs(args...).SetOffset(offset).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (this *User) Add() (pk interface{}, err error) {
	this.Id = 0
	pk, err = this.Param().SetSend(this).Insert()
	if err == nil && pk != nil {
		if v, y := pk.(uint); y {
			this.Id = v
		} else if v, y := pk.(int64); y {
			this.Id = uint(v)
		}
	}
	return
}

func (this *User) Edit(mw func(db.Result) db.Result, args ...interface{}) error {
	
	return this.Param().SetArgs(args...).SetSend(this).SetMiddleware(mw).Update()
}

func (this *User) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = this.Param().SetArgs(args...).SetSend(this).SetMiddleware(mw).Upsert(func(){
		
	},func(){
		this.Id = 0
	})
	if err == nil && pk != nil {
		if v, y := pk.(uint); y {
			this.Id = v
		} else if v, y := pk.(int64); y {
			this.Id = uint(v)
		}
	}
	return 
}

func (this *User) Delete(mw func(db.Result) db.Result, args ...interface{}) error {
	
	return this.Param().SetArgs(args...).SetMiddleware(mw).Delete()
}

func (this *User) Count(mw func(db.Result) db.Result, args ...interface{}) (int64, error) {
	return this.Param().SetArgs(args...).SetMiddleware(mw).Count()
}
