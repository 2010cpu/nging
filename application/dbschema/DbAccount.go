//Do not edit this file, which is automatically generated by the generator.
package dbschema

import (
	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	
	"time"
)

type DbAccount struct {
	param   *factory.Param
	trans	*factory.Transaction
	objects []*DbAccount
	
	Id      	uint    	`db:"id,omitempty,pk" bson:"id,omitempty" comment:"ID" json:"id" xml:"id"`
	Uid     	uint    	`db:"uid" bson:"uid" comment:"UID" json:"uid" xml:"uid"`
	Engine  	string  	`db:"engine" bson:"engine" comment:"数据库引擎" json:"engine" xml:"engine"`
	Host    	string  	`db:"host" bson:"host" comment:"服务器地址" json:"host" xml:"host"`
	User    	string  	`db:"user" bson:"user" comment:"用户名" json:"user" xml:"user"`
	Password	string  	`db:"password" bson:"password" comment:"密码" json:"password" xml:"password"`
	Name    	string  	`db:"name" bson:"name" comment:"数据库名称" json:"name" xml:"name"`
	Options 	string  	`db:"options" bson:"options" comment:"其它选项(JSON)" json:"options" xml:"options"`
	Created 	uint    	`db:"created" bson:"created" comment:"创建时间" json:"created" xml:"created"`
	Updated 	uint    	`db:"updated" bson:"updated" comment:"修改时间" json:"updated" xml:"updated"`
}

func (this *DbAccount) Trans() *factory.Transaction {
	return this.trans
}

func (this *DbAccount) Use(trans *factory.Transaction) factory.Model {
	this.trans = trans
	return this
}

func (this *DbAccount) Objects() []*DbAccount {
	if this.objects == nil {
		return nil
	}
	return this.objects[:]
}

func (this *DbAccount) NewObjects() *[]*DbAccount {
	this.objects = []*DbAccount{}
	return &this.objects
}

func (this *DbAccount) NewParam() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetTrans(this.trans).SetCollection("db_account").SetModel(this)
}

func (this *DbAccount) SetParam(param *factory.Param) factory.Model {
	this.param = param
	return this
}

func (this *DbAccount) Param() *factory.Param {
	if this.param == nil {
		return this.NewParam()
	}
	return this.param
}

func (this *DbAccount) Get(mw func(db.Result) db.Result, args ...interface{}) error {
	return this.Param().SetArgs(args...).SetRecv(this).SetMiddleware(mw).One()
}

func (this *DbAccount) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = this.NewObjects()
	}
	return this.Param().SetArgs(args...).SetPage(page).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (this *DbAccount) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = this.NewObjects()
	}
	return this.Param().SetArgs(args...).SetOffset(offset).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (this *DbAccount) Add() (pk interface{}, err error) {
	this.Created = uint(time.Now().Unix())
	this.Id = 0
	pk, err = this.Param().SetSend(this).Insert()
	if err == nil && pk != nil {
		if v, y := pk.(uint); y {
			this.Id = v
		} else if v, y := pk.(int64); y {
			this.Id = uint(v)
		}
	}
	return
}

func (this *DbAccount) Edit(mw func(db.Result) db.Result, args ...interface{}) error {
	this.Updated = uint(time.Now().Unix())
	return this.Param().SetArgs(args...).SetSend(this).SetMiddleware(mw).Update()
}

func (this *DbAccount) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = this.Param().SetArgs(args...).SetSend(this).SetMiddleware(mw).Upsert(func(){
		this.Updated = uint(time.Now().Unix())
	},func(){
		this.Created = uint(time.Now().Unix())
	this.Id = 0
	})
	if err == nil && pk != nil {
		if v, y := pk.(uint); y {
			this.Id = v
		} else if v, y := pk.(int64); y {
			this.Id = uint(v)
		}
	}
	return 
}

func (this *DbAccount) Delete(mw func(db.Result) db.Result, args ...interface{}) error {
	
	return this.Param().SetArgs(args...).SetMiddleware(mw).Delete()
}

func (this *DbAccount) Count(mw func(db.Result) db.Result, args ...interface{}) (int64, error) {
	return this.Param().SetArgs(args...).SetMiddleware(mw).Count()
}
