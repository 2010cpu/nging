// @generated Do not edit this file, which is automatically generated by the generator.

package dbschema

import (
	"fmt"

	"time"

	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	"github.com/webx-top/echo"
	"github.com/webx-top/echo/param"
)

type Slice_AccessLog []*AccessLog

func (s Slice_AccessLog) Range(fn func(m factory.Model) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_AccessLog) RangeRaw(fn func(m *AccessLog) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_AccessLog) GroupBy(keyField string) map[string][]*AccessLog {
	r := map[string][]*AccessLog{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		if _, y := r[vkey]; !y {
			r[vkey] = []*AccessLog{}
		}
		r[vkey] = append(r[vkey], row)
	}
	return r
}

func (s Slice_AccessLog) KeyBy(keyField string) map[string]*AccessLog {
	r := map[string]*AccessLog{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = row
	}
	return r
}

func (s Slice_AccessLog) AsKV(keyField string, valueField string) param.Store {
	r := param.Store{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = dmap[valueField]
	}
	return r
}

func (s Slice_AccessLog) Transform(transfers map[string]param.Transfer) []param.Store {
	r := make([]param.Store, len(s))
	for idx, row := range s {
		r[idx] = row.AsMap().Transform(transfers)
	}
	return r
}

// AccessLog
type AccessLog struct {
	base    factory.Base
	objects []*AccessLog

	Id          uint64  `db:"id,omitempty,pk" bson:"id,omitempty" comment:"ID" json:"id" xml:"id"`
	VhostId     uint    `db:"vhost_id" bson:"vhost_id" comment:"虚拟主机ID" json:"vhost_id" xml:"vhost_id"`
	RemoteAddr  string  `db:"remote_addr" bson:"remote_addr" comment:"IP地址" json:"remote_addr" xml:"remote_addr"`
	XRealIp     string  `db:"x_real_ip" bson:"x_real_ip" comment:"IP" json:"x_real_ip" xml:"x_real_ip"`
	XForwardFor string  `db:"x_forward_for" bson:"x_forward_for" comment:"IP" json:"x_forward_for" xml:"x_forward_for"`
	LocalAddr   string  `db:"local_addr" bson:"local_addr" comment:"本机地址" json:"local_addr" xml:"local_addr"`
	Elapsed     float64 `db:"elapsed" bson:"elapsed" comment:"耗时(秒)" json:"elapsed" xml:"elapsed"`
	Host        string  `db:"host" bson:"host" comment:"Header中的Host, 一般会是域名" json:"host" xml:"host"`
	User        string  `db:"user" bson:"user" comment:"用户" json:"user" xml:"user"`
	TimeLocal   string  `db:"time_local" bson:"time_local" comment:"本地时间格式" json:"time_local" xml:"time_local"`
	Minute      string  `db:"minute" bson:"minute" comment:"H:i" json:"minute" xml:"minute"`
	Method      string  `db:"method" bson:"method" comment:"GET POST HEAD OPTIONS PUT DELETE..." json:"method" xml:"method"`
	Uri         string  `db:"uri" bson:"uri" comment:"网址" json:"uri" xml:"uri"`
	Version     string  `db:"version" bson:"version" comment:"HTTP/1.0, HTTP/1.1 ..." json:"version" xml:"version"`
	StatusCode  uint    `db:"status_code" bson:"status_code" comment:"状态码" json:"status_code" xml:"status_code"`
	BodyBytes   uint64  `db:"body_bytes" bson:"body_bytes" comment:"响应body字节数" json:"body_bytes" xml:"body_bytes"`
	Referer     string  `db:"referer" bson:"referer" comment:"来源网址" json:"referer" xml:"referer"`
	UserAgent   string  `db:"user_agent" bson:"user_agent" comment:"用户代理" json:"user_agent" xml:"user_agent"`
	HitStatus   uint    `db:"hit_status" bson:"hit_status" comment:"缓存服务器命中状态" json:"hit_status" xml:"hit_status"`
	Scheme      string  `db:"scheme" bson:"scheme" comment:"https/http" json:"scheme" xml:"scheme"`
	BrowerName  string  `db:"brower_name" bson:"brower_name" comment:"浏览器名" json:"brower_name" xml:"brower_name"`
	BrowerType  string  `db:"brower_type" bson:"brower_type" comment:"浏览器类型(spider/mobile/pc)" json:"brower_type" xml:"brower_type"`
	Created     uint    `db:"created" bson:"created" comment:"创建时间" json:"created" xml:"created"`
}

// - base function

func (a *AccessLog) Trans() *factory.Transaction {
	return a.base.Trans()
}

func (a *AccessLog) Use(trans *factory.Transaction) factory.Model {
	a.base.Use(trans)
	return a
}

func (a *AccessLog) SetContext(ctx echo.Context) factory.Model {
	a.base.SetContext(ctx)
	return a
}

func (a *AccessLog) EventON(on ...bool) factory.Model {
	a.base.EventON(on...)
	return a
}

func (a *AccessLog) EventOFF(off ...bool) factory.Model {
	a.base.EventOFF(off...)
	return a
}

func (a *AccessLog) Context() echo.Context {
	return a.base.Context()
}

func (a *AccessLog) SetConnID(connID int) factory.Model {
	a.base.SetConnID(connID)
	return a
}

func (a *AccessLog) SetNamer(namer func(string) string) factory.Model {
	a.base.SetNamer(namer)
	return a
}

func (a *AccessLog) Namer() func(string) string {
	return a.base.Namer()
}

func (a *AccessLog) SetParam(param *factory.Param) factory.Model {
	a.base.SetParam(param)
	return a
}

func (a *AccessLog) Param(mw func(db.Result) db.Result, args ...interface{}) *factory.Param {
	if a.base.Param() == nil {
		return a.NewParam().SetMiddleware(mw).SetArgs(args...)
	}
	return a.base.Param().SetMiddleware(mw).SetArgs(args...)
}

// - current function

func (a *AccessLog) New(structName string, connID ...int) factory.Model {
	if len(connID) > 0 {
		return factory.NewModel(structName, connID[0]).Use(a.base.Trans())
	}
	return factory.NewModel(structName, a.base.ConnID()).Use(a.base.Trans())
}

func (a *AccessLog) Objects() []*AccessLog {
	if a.objects == nil {
		return nil
	}
	return a.objects[:]
}

func (a *AccessLog) XObjects() Slice_AccessLog {
	return Slice_AccessLog(a.Objects())
}

func (a *AccessLog) NewObjects() factory.Ranger {
	return &Slice_AccessLog{}
}

func (a *AccessLog) InitObjects() *[]*AccessLog {
	a.objects = []*AccessLog{}
	return &a.objects
}

func (a *AccessLog) NewParam() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetIndex(a.base.ConnID()).SetTrans(a.base.Trans()).SetCollection(a.Name_()).SetModel(a)
}

func (a *AccessLog) Short_() string {
	return "access_log"
}

func (a *AccessLog) Struct_() string {
	return "AccessLog"
}

func (a *AccessLog) Name_() string {
	if a.base.Namer() != nil {
		return WithPrefix(a.base.Namer()(a.Short_()))
	}
	return WithPrefix(factory.TableNamerGet(a.Short_())(a))
}

func (a *AccessLog) CPAFrom(source factory.Model) factory.Model {
	a.SetContext(source.Context())
	a.Use(source.Trans())
	a.SetNamer(source.Namer())
	return a
}

func (a *AccessLog) Get(mw func(db.Result) db.Result, args ...interface{}) error {
	base := a.base
	err := a.Param(mw, args...).SetRecv(a).One()
	a.base = base
	return err
}

func (a *AccessLog) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	return a.Param(mw, args...).SetPage(page).SetSize(size).SetRecv(recv).List()
}

func (a *AccessLog) GroupBy(keyField string, inputRows ...[]*AccessLog) map[string][]*AccessLog {
	var rows Slice_AccessLog
	if len(inputRows) > 0 {
		rows = Slice_AccessLog(inputRows[0])
	} else {
		rows = Slice_AccessLog(a.Objects())
	}
	return rows.GroupBy(keyField)
}

func (a *AccessLog) KeyBy(keyField string, inputRows ...[]*AccessLog) map[string]*AccessLog {
	var rows Slice_AccessLog
	if len(inputRows) > 0 {
		rows = Slice_AccessLog(inputRows[0])
	} else {
		rows = Slice_AccessLog(a.Objects())
	}
	return rows.KeyBy(keyField)
}

func (a *AccessLog) AsKV(keyField string, valueField string, inputRows ...[]*AccessLog) param.Store {
	var rows Slice_AccessLog
	if len(inputRows) > 0 {
		rows = Slice_AccessLog(inputRows[0])
	} else {
		rows = Slice_AccessLog(a.Objects())
	}
	return rows.AsKV(keyField, valueField)
}

func (a *AccessLog) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	return a.Param(mw, args...).SetOffset(offset).SetSize(size).SetRecv(recv).List()
}

func (a *AccessLog) Add() (pk interface{}, err error) {
	a.Created = uint(time.Now().Unix())
	a.Id = 0
	if len(a.TimeLocal) == 0 {
		a.TimeLocal = "1970-01-01 00:00:00"
	}
	if a.base.Eventable() {
		err = DBI.Fire("creating", a, nil)
		if err != nil {
			return
		}
	}
	pk, err = a.Param(nil).SetSend(a).Insert()
	if err == nil && pk != nil {
		if v, y := pk.(uint64); y {
			a.Id = v
		} else if v, y := pk.(int64); y {
			a.Id = uint64(v)
		}
	}
	if err == nil && a.base.Eventable() {
		err = DBI.Fire("created", a, nil)
	}
	return
}

func (a *AccessLog) Edit(mw func(db.Result) db.Result, args ...interface{}) (err error) {

	if len(a.TimeLocal) == 0 {
		a.TimeLocal = "1970-01-01 00:00:00"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(a).Update()
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(a).Update(); err != nil {
		return
	}
	return DBI.Fire("updated", a, mw, args...)
}

func (a *AccessLog) SetField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) (err error) {
	return a.SetFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (a *AccessLog) SetFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) (err error) {

	if val, ok := kvset["time_local"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["time_local"] = "1970-01-01 00:00:00"
		}
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(kvset).Update()
	}
	m := *a
	m.FromRow(kvset)
	var editColumns []string
	for column := range kvset {
		editColumns = append(editColumns, column)
	}
	if err = DBI.FireUpdate("updating", &m, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(kvset).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, editColumns, mw, args...)
}

func (a *AccessLog) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = a.Param(mw, args...).SetSend(a).Upsert(func() error {
		if len(a.TimeLocal) == 0 {
			a.TimeLocal = "1970-01-01 00:00:00"
		}
		if !a.base.Eventable() {
			return nil
		}
		return DBI.Fire("updating", a, mw, args...)
	}, func() error {
		a.Created = uint(time.Now().Unix())
		a.Id = 0
		if len(a.TimeLocal) == 0 {
			a.TimeLocal = "1970-01-01 00:00:00"
		}
		if !a.base.Eventable() {
			return nil
		}
		return DBI.Fire("creating", a, nil)
	})
	if err == nil && pk != nil {
		if v, y := pk.(uint64); y {
			a.Id = v
		} else if v, y := pk.(int64); y {
			a.Id = uint64(v)
		}
	}
	if err == nil && a.base.Eventable() {
		if pk == nil {
			err = DBI.Fire("updated", a, mw, args...)
		} else {
			err = DBI.Fire("created", a, nil)
		}
	}
	return
}

func (a *AccessLog) Delete(mw func(db.Result) db.Result, args ...interface{}) (err error) {

	if !a.base.Eventable() {
		return a.Param(mw, args...).Delete()
	}
	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).Delete(); err != nil {
		return
	}
	return DBI.Fire("deleted", a, mw, args...)
}

func (a *AccessLog) Count(mw func(db.Result) db.Result, args ...interface{}) (int64, error) {
	return a.Param(mw, args...).Count()
}

func (a *AccessLog) Reset() *AccessLog {
	a.Id = 0
	a.VhostId = 0
	a.RemoteAddr = ``
	a.XRealIp = ``
	a.XForwardFor = ``
	a.LocalAddr = ``
	a.Elapsed = 0.0
	a.Host = ``
	a.User = ``
	a.TimeLocal = ``
	a.Minute = ``
	a.Method = ``
	a.Uri = ``
	a.Version = ``
	a.StatusCode = 0
	a.BodyBytes = 0
	a.Referer = ``
	a.UserAgent = ``
	a.HitStatus = 0
	a.Scheme = ``
	a.BrowerName = ``
	a.BrowerType = ``
	a.Created = 0
	return a
}

func (a *AccessLog) AsMap() param.Store {
	r := param.Store{}
	r["Id"] = a.Id
	r["VhostId"] = a.VhostId
	r["RemoteAddr"] = a.RemoteAddr
	r["XRealIp"] = a.XRealIp
	r["XForwardFor"] = a.XForwardFor
	r["LocalAddr"] = a.LocalAddr
	r["Elapsed"] = a.Elapsed
	r["Host"] = a.Host
	r["User"] = a.User
	r["TimeLocal"] = a.TimeLocal
	r["Minute"] = a.Minute
	r["Method"] = a.Method
	r["Uri"] = a.Uri
	r["Version"] = a.Version
	r["StatusCode"] = a.StatusCode
	r["BodyBytes"] = a.BodyBytes
	r["Referer"] = a.Referer
	r["UserAgent"] = a.UserAgent
	r["HitStatus"] = a.HitStatus
	r["Scheme"] = a.Scheme
	r["BrowerName"] = a.BrowerName
	r["BrowerType"] = a.BrowerType
	r["Created"] = a.Created
	return r
}

func (a *AccessLog) FromRow(row map[string]interface{}) {
	for key, value := range row {
		switch key {
		case "id":
			a.Id = param.AsUint64(value)
		case "vhost_id":
			a.VhostId = param.AsUint(value)
		case "remote_addr":
			a.RemoteAddr = param.AsString(value)
		case "x_real_ip":
			a.XRealIp = param.AsString(value)
		case "x_forward_for":
			a.XForwardFor = param.AsString(value)
		case "local_addr":
			a.LocalAddr = param.AsString(value)
		case "elapsed":
			a.Elapsed = param.AsFloat64(value)
		case "host":
			a.Host = param.AsString(value)
		case "user":
			a.User = param.AsString(value)
		case "time_local":
			a.TimeLocal = param.AsString(value)
		case "minute":
			a.Minute = param.AsString(value)
		case "method":
			a.Method = param.AsString(value)
		case "uri":
			a.Uri = param.AsString(value)
		case "version":
			a.Version = param.AsString(value)
		case "status_code":
			a.StatusCode = param.AsUint(value)
		case "body_bytes":
			a.BodyBytes = param.AsUint64(value)
		case "referer":
			a.Referer = param.AsString(value)
		case "user_agent":
			a.UserAgent = param.AsString(value)
		case "hit_status":
			a.HitStatus = param.AsUint(value)
		case "scheme":
			a.Scheme = param.AsString(value)
		case "brower_name":
			a.BrowerName = param.AsString(value)
		case "brower_type":
			a.BrowerType = param.AsString(value)
		case "created":
			a.Created = param.AsUint(value)
		}
	}
}

func (a *AccessLog) Set(key interface{}, value ...interface{}) {
	switch k := key.(type) {
	case map[string]interface{}:
		for kk, vv := range k {
			a.Set(kk, vv)
		}
	default:
		var (
			kk string
			vv interface{}
		)
		if k, y := key.(string); y {
			kk = k
		} else {
			kk = fmt.Sprint(key)
		}
		if len(value) > 0 {
			vv = value[0]
		}
		switch kk {
		case "Id":
			a.Id = param.AsUint64(vv)
		case "VhostId":
			a.VhostId = param.AsUint(vv)
		case "RemoteAddr":
			a.RemoteAddr = param.AsString(vv)
		case "XRealIp":
			a.XRealIp = param.AsString(vv)
		case "XForwardFor":
			a.XForwardFor = param.AsString(vv)
		case "LocalAddr":
			a.LocalAddr = param.AsString(vv)
		case "Elapsed":
			a.Elapsed = param.AsFloat64(vv)
		case "Host":
			a.Host = param.AsString(vv)
		case "User":
			a.User = param.AsString(vv)
		case "TimeLocal":
			a.TimeLocal = param.AsString(vv)
		case "Minute":
			a.Minute = param.AsString(vv)
		case "Method":
			a.Method = param.AsString(vv)
		case "Uri":
			a.Uri = param.AsString(vv)
		case "Version":
			a.Version = param.AsString(vv)
		case "StatusCode":
			a.StatusCode = param.AsUint(vv)
		case "BodyBytes":
			a.BodyBytes = param.AsUint64(vv)
		case "Referer":
			a.Referer = param.AsString(vv)
		case "UserAgent":
			a.UserAgent = param.AsString(vv)
		case "HitStatus":
			a.HitStatus = param.AsUint(vv)
		case "Scheme":
			a.Scheme = param.AsString(vv)
		case "BrowerName":
			a.BrowerName = param.AsString(vv)
		case "BrowerType":
			a.BrowerType = param.AsString(vv)
		case "Created":
			a.Created = param.AsUint(vv)
		}
	}
}

func (a *AccessLog) AsRow() param.Store {
	r := param.Store{}
	r["id"] = a.Id
	r["vhost_id"] = a.VhostId
	r["remote_addr"] = a.RemoteAddr
	r["x_real_ip"] = a.XRealIp
	r["x_forward_for"] = a.XForwardFor
	r["local_addr"] = a.LocalAddr
	r["elapsed"] = a.Elapsed
	r["host"] = a.Host
	r["user"] = a.User
	r["time_local"] = a.TimeLocal
	r["minute"] = a.Minute
	r["method"] = a.Method
	r["uri"] = a.Uri
	r["version"] = a.Version
	r["status_code"] = a.StatusCode
	r["body_bytes"] = a.BodyBytes
	r["referer"] = a.Referer
	r["user_agent"] = a.UserAgent
	r["hit_status"] = a.HitStatus
	r["scheme"] = a.Scheme
	r["brower_name"] = a.BrowerName
	r["brower_type"] = a.BrowerType
	r["created"] = a.Created
	return r
}

func (a *AccessLog) BatchValidate(kvset map[string]interface{}) error {
	if kvset == nil {
		kvset = a.AsRow()
	}
	return factory.BatchValidate(a.Short_(), kvset)
}

func (a *AccessLog) Validate(field string, value interface{}) error {
	return factory.Validate(a.Short_(), field, value)
}
